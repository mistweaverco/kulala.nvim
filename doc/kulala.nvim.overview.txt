*kulala.nvim.overview.txt*  A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents                     *kulala.nvim.overview-table-of-contents*

1. Scripts overview                    |kulala.nvim.overview-scripts-overview|
  - Pre-request            |kulala.nvim.overview-scripts-overview-pre-request|
2. @name REQUEST_TWO                  |kulala.nvim.overview-@name-request_two|
  - Post-request         |kulala.nvim.overview-@name-request_two-post-request|
3. @name REQUEST_TWO                  |kulala.nvim.overview-@name-request_two|
4. @name REQUEST_THREE              |kulala.nvim.overview-@name-request_three|
  - Print Variables |kulala.nvim.overview-@name-request_three-print-variables|
5. Links                                          |kulala.nvim.overview-links|

==============================================================================
1. Scripts overview                    *kulala.nvim.overview-scripts-overview*

You can use scripts to automate tasks in the editor. Scripts are written in
JavaScript and executed via `node`.



CURRENT WORKING DIRECTORY ~

The current working directory for scripts is:

- the directory of the current HTTP file for inline scripts
- the directory of the external script file for external scripts

Given the following folder structure:

>plaintext
    .
    ├── http
    │   └── example.http
    │   └── example.js
    └── scripts
        └── my-script.js
<

The current working directory for `my-script.js` is the `scripts` directory,
whereas the current working directory for `example.js` is the `http` directory.

All inline scripts are executed in the current working directory of the HTTP
file, which is the `http` directory in this case.


USING NODE MODULES ~

You can use any Node.js module in your scripts.

If you have a folder structure like this:

>plaintext
    .
    ├── http
    │   └── example.http
    └── scripts
        └── my-script.js
<

You can use the `require` function to import modules in `my-script.js`:

>javascript
    const moment = require("moment");
<

as long as the module is installed in the same directory as the script, or
globally.

The current working directory for `my-script.js` is the `scripts` directory.

So want to write a file in the `http` directory, you can use a relative path:

>javascript
    const fs = require("fs");
    fs.writeFileSync("../http/my-file.txt", "Hello, world!");
<


PRE-REQUEST                *kulala.nvim.overview-scripts-overview-pre-request*

```http title="./pre-request-example.http" # @name REQUEST_ONE < {% var crypto
= require('crypto'); var fs = require('fs'); var TOKEN =
fs.readFileSync('TOKEN.txt', 'utf8').trim(); request.variables.set('GORILLA',
TOKEN); request.variables.set('PASSWORD',
crypto.randomBytes(16).toString('hex')); %} < ./pre-request.js POST
https://httpbin.org/post HTTP/1.1 Accept: application/json Content-Type:
application/json Authorization: Bearer Foo:bar

{ "token": "{{GORILLA}}", "password": "{{PASSWORD}}", "deep": { "nested": [ {
"key": "foo" }, { "key": "{{BONOBO}}" } ] } }


 ~


==============================================================================
2. @name REQUEST_TWO                  *kulala.nvim.overview-@name-request_two*

POST https://httpbin.org/post HTTP/1.1 accept: application/json content-type:
application/json

{ "token": "{{REQUEST_ONE.response.body.`.json.token}}", "nested":
"{{REQUEST_ONE.response.body.`.json.deep.nested[1].key}}", "gorilla":
"{{GORILLA}}" }

>
    
    :::tip
    
    Variables set via `request.variables.set` are
    only available in the current request.
    
    :::
    
    ```javascript title="./pre-request.js"
    client.global.set("BONOBO", "bar");
<


`text title="./TOKEN.txt" THIS_IS_SOME_TOKEN_VALUE_123`


POST-REQUEST             *kulala.nvim.overview-@name-request_two-post-request*

```http title="./post-request-example.http" # @name REQUEST_ONE POST
https://httpbin.org/post HTTP/1.1 Accept: application/json Content-Type:
application/json Authorization: Bearer Foo:bar

{ "token": "SOME_TOKEN", "deep": { "nested": [ { "key": "foo" } ] } }


  {% var fs = require('fs'); fs.writeFileSync('TOKEN.txt',
  response.body.json.token); client.global.set('GORILLA_TOKEN',
  response.body.json.token); %}

 ~


==============================================================================
3. @name REQUEST_TWO                  *kulala.nvim.overview-@name-request_two*

POST https://httpbin.org/post HTTP/1.1 Accept: application/json Content-Type:
application/json

{ "gorilla": "{{GORILLA_TOKEN}}" }


  ./post-request.js

 ~


==============================================================================
4. @name REQUEST_THREE              *kulala.nvim.overview-@name-request_three*

POST https://httpbin.org/post HTTP/1.1 Accept: application/json Content-Type:
application/json

{ "date_header_from_request_two": "{{BONOBO}}" }

>
    
    ```javascript title="./post-request.js"
    client.global.set("BONOBO", response.headers.valueOf("Date"));
<


PRINT VARIABLES     *kulala.nvim.overview-@name-request_three-print-variables*

```http title="./pre-request-example.http" # @name REQUEST_ONE < {% var crypto
= require('crypto'); var fs = require('fs'); var TOKEN =
fs.readFileSync('TOKEN.txt', 'utf8').trim(); var PASSWORD =
crypto.randomBytes(16).toString('hex'); request.variables.set('GORILLA',
TOKEN); request.variables.set('PASSWORD', PASSWORD); console.log(TOKEN)
console.log(PASSWORD) %} < ./pre-request.js POST https://httpbin.org/post
HTTP/1.1 Accept: application/json Content-Type: application/json Authorization:
Bearer Foo:bar

{ "token": "{{GORILLA}}", "password": "{{PASSWORD}}", "deep": { "nested": [ {
"key": "foo" }, { "key": "{{BONOBO}}" } ] } }


  {% var token = response.body.json.token var fs = require('fs');
  fs.writeFileSync('TOKEN.txt', token); client.global.set('GORILLA_TOKEN',
  token); console.log(token) %}
>
    
    :::tip
    
    If you add `console.log` to script,
    the output will be displayed in the `Script Output` panel,
    when you have enabled the following configuration.
    
    ```lua
    opts = {
      default_winbar_panes = { "body", "headers", "headers_body", "script_output" },
    }
<

:::

==============================================================================
5. Links                                          *kulala.nvim.overview-links*

1. *@name*: 
2. *@name*: 
3. *@name*: 

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
