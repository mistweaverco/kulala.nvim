*kulala.nvim.testing-and-reporting.txt*A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents        *kulala.nvim.testing-and-reporting-table-of-contents*

1. Testing and Reporting|kulala.nvim.testing-and-reporting-testing-and-reporting|
  - Usage      |kulala.nvim.testing-and-reporting-testing-and-reporting-usage|
2. Links                             |kulala.nvim.testing-and-reporting-links|

==============================================================================
1. Testing and Reporting*kulala.nvim.testing-and-reporting-testing-and-reporting*

- You can effectively use Kulala to produce, run and report tests for your APIs, using HTTP spec files and built-in assert functions.



USAGE          *kulala.nvim.testing-and-reporting-testing-and-reporting-usage*


TESTING HTTP REQUESTS WITH ASSERT FUNCTIONS ~

To test HTTP requests in Kulala, you can use the provided assert functions to
validate various aspects of the response. Below is a guide on how to use these
functions effectively.

1. **Define Your Test Suite and Test Cases**: Use `client.test` to define a test
suite and individual test cases within it.


2. **Assert Functions**:



>ts
      assert(value, message?) // Checks if the value is truthy.
      assert.true(value, message?) // Checks if the value is true.
      assert.false(value, message?) // Checks if the value is false.
      assert.same(value, expected, message?) // Checks if the value is the same as the expected value.
      assert.hasString(value, expected, message?) // Checks if the string contains the expected substring.
      assert.responseHas(key, expected, message?) // Checks if the response has the expected key with the expected value.
      assert.headersHas(key, expected, message?) // Checks if the response headers have the expected key with the expected value.
      assert.bodyHas(expected, message?) // Checks if the response body contains the expected string.
      assert.jsonHas(key, expected, message?)` // Checks if the JSON response has the expected key with the expected value.
<


1. **Example**:

>http
    @OCCUPATION = Developer
    POST https://httpbin.org/post?key1=value1 HTTP/1.1
    accept: application/json
    content-type: application/json
    
    {
      "data": {
        "name": "John Doe",
        "occupation": "{{OCCUPATION}}",
        "age": 30
      }
    }
    
    > {%
      let json = response.body.json.data;
    
      client.test("Test suite name 1", function() {
        assert(json.name == "John Doe")
        assert(json.name == "John Doe", "Check if name is correct")
    
        assert.same(json.occupation, "Developer")
        assert.same(json.occupation, "Developer", "Check occupation")
    
        client.assert.true(json.age == 30, "Age is correct")
        client.assert.false(json.age == 40, "Age is not 40")
      });
    
      client.log("Test Script Output 1")
    
      client.test("Test suite name 2", function() {
        assert.hasString(json.occupation, "Develop", "Check if occupation contains Develop")
        assert.responseHas('responseCode', 200, "Check if response code is 200")
        assert.headersHas('Content-Type', "application/json", "Check content type")
      });
      assert.jsonHas("json.data.occupation", "Developer", "Check json payload")
    %}
<


REPORTING RESULTS ~

After executing requests, you can view reports in the Kulala `Report (R)`
section. When the cursor is on the line of request summary, you can press
`<CR>` to jump to the corresponding response output.


REPORTING OPTIONS

Kulala provides comprehensive reporting options to help you analyze the results
of your HTTP requests and test assertions.

>lua
      {
        halt_on_error = false,
        show_request_summary = true,
        disable_script_print_output = false,
    
        ui = {
          report = {
            -- possible values: true | false | "on_error"
            show_script_output = true,
            -- possible values: true | false | "on_error" | "failed_only"
            show_asserts_output = true,
            -- possible values: true | false
            show_summary = true,
          }
        }
      }
<

- `halt_on_error` - allows to halt/continue running a sequence of requests when a failure is encountered.
- `show_request_summary` - shows/hides request summary at the top of the output window
- `disable_script_print_output` - disables/enables notifications of the script output
- `ui.report.show_script_output` - shows/hides the script output. `on_error` will show the output only when request status is failed.
- `ui.report.show_asserts_output` - shows/hides the assert output. `on_error` will show the output only when request status is failed, `failed_only` will show only the failed asserts.
- `ui.report.show_summary` - shows/hides the summary of the test results.

==============================================================================
2. Links                             *kulala.nvim.testing-and-reporting-links*

1. *Kulala Report*: ./../../static/img/kulala_report.png

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
