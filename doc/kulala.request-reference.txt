*kulala.request-reference.txt*A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents                 *kulala.request-reference-table-of-contents*

1. Scripts request reference|kulala.request-reference-scripts-request-reference|
  - request.variables.get|kulala.request-reference-scripts-request-reference-request.variables.get|
  - request.variables.set|kulala.request-reference-scripts-request-reference-request.variables.set|
  - request.body.getRaw|kulala.request-reference-scripts-request-reference-request.body.getraw|
  - request.body.tryGetSubstituted|kulala.request-reference-scripts-request-reference-request.body.trygetsubstituted|
  - request.body.getComputed|kulala.request-reference-scripts-request-reference-request.body.getcomputed|
  - request.environment.get|kulala.request-reference-scripts-request-reference-request.environment.get|
  - request.headers.all|kulala.request-reference-scripts-request-reference-request.headers.all|
  - request.headers.findByName|kulala.request-reference-scripts-request-reference-request.headers.findbyname|
  - request.method|kulala.request-reference-scripts-request-reference-request.method|
  - request.url.getRaw|kulala.request-reference-scripts-request-reference-request.url.getraw|
  - request.url.tryGetSubstituted|kulala.request-reference-scripts-request-reference-request.url.trygetsubstituted|
  - request.skip|kulala.request-reference-scripts-request-reference-request.skip|
  - request.replay|kulala.request-reference-scripts-request-reference-request.replay|

==============================================================================
1. Scripts request reference*kulala.request-reference-scripts-request-reference*

These helper functions are available in the request object in scripts.


REQUEST.VARIABLES.GET*kulala.request-reference-scripts-request-reference-request.variables.get*

Get a request variable.

Request variables are only available for the duration of the request.

>javascript
    client.log(request.variables.get("SOME_TOKEN"));
<


REQUEST.VARIABLES.SET*kulala.request-reference-scripts-request-reference-request.variables.set*

Set a request variable.

Request variables are only available for the duration of the request.

>javascript
    request.variables.set("SOME_TOKEN, "123");
    client.log(request.variables.get("SOME_TOKEN"));
<


REQUEST.BODY.GETRAW*kulala.request-reference-scripts-request-reference-request.body.getraw*

Returns the request body `string` in the raw format (or `undefined` if there is
no body).

If the body contains variables, their names are displayed instead of their
values. For example:

>javascript
    client.log(request.body.getRaw());
<


REQUEST.BODY.TRYGETSUBSTITUTED*kulala.request-reference-scripts-request-reference-request.body.trygetsubstituted*

Returns the request body with variables substituted (or `undefined` if there is
no body).

>javascript
    client.log(request.body.tryGetSubstituted());
<


REQUEST.BODY.GETCOMPUTED*kulala.request-reference-scripts-request-reference-request.body.getcomputed*

Returns the `string` request body as sent via curl; with variables substituted,
or `undefined` if there is no body.


As an example, if you have a request body like this:

>graphql
    query getRestClient($name: String!) {
      restclient(name: $name) {
        id
        name
        editorsSupported {
          name
        }
      }
    }
    
    {
      "variables": {
        "name": "{{ENV_VAR_CLIENT_NAME}}"
      }
    }
<

Then the `getComputed` method will return the body as it was sent to the
server:

>json
    {"query": "query getRestClient($name: String!) { restclient(name: $name) { id name editorsSupported { name } } } ", "variables": {"variables": {"name": "kulala"}}}
<

whereas the `tryGetSubstituted` method will return the body with variables
substituted as seen in your script:

>graphql
    query getRestClient($name: String!) {
      restclient(name: $name) {
        id
        name
        editorsSupported {
          name
        }
      }
    }
    
    {
      "variables": {
        "name": "kulala"
      }
    }
<



REQUEST.ENVIRONMENT.GET*kulala.request-reference-scripts-request-reference-request.environment.get*

Retrieves a value of the environment variable identified by its name or returns
null if it doesnâ€™t exist.

>javascript
    client.log(request.environment.get("SOME_ENV_VAR"));
<


REQUEST.HEADERS.ALL*kulala.request-reference-scripts-request-reference-request.headers.all*

Returns all request header objects.

Each header object has the following methods:

- `name()` - Returns the name of the header.
- `getRawValue()` - Returns the value of the header in the raw format.
- `tryGetSubstituted()` - Returns the value of the header with variables substituted.

>javascript
    const headers = request.headers.all();
    for (const header of headers) {
      client.log(header.name());
      client.log(header.getRawValue());
      client.log(header.tryGetSubstituted());
    }
<


REQUEST.HEADERS.FINDBYNAME*kulala.request-reference-scripts-request-reference-request.headers.findbyname*

Returns a request header object identified by its name.

The header object has the following methods:

- `name()` - Returns the name of the header.
- `getRawValue()` - Returns the value of the header in the raw format.
- `tryGetSubstituted()` - Returns the value of the header with variables substituted.

>javascript
    const contentTypeHeader = request.headers.findByName("Content-Type");
    if (contentTypeHeader) {
      client.log(contentTypeHeader.name());
      client.log(contentTypeHeader.getRawValue());
      client.log(contentTypeHeader.tryGetSubstituted());
    }
<


REQUEST.METHOD*kulala.request-reference-scripts-request-reference-request.method*

Returns the request method.

Such as `GET`, `POST`, `PUT`, `DELETE`, etc.

>javascript
    client.log(request.method());
<


REQUEST.URL.GETRAW*kulala.request-reference-scripts-request-reference-request.url.getraw*

Returns the request URL in the raw format, without any substitutions.

>javascript
    client.log(request.url.getRaw());
<


REQUEST.URL.TRYGETSUBSTITUTED*kulala.request-reference-scripts-request-reference-request.url.trygetsubstituted*

Returns the request URL with variables substituted.

>javascript
    client.log(request.url.tryGetSubstituted());
<


REQUEST.SKIP *kulala.request-reference-scripts-request-reference-request.skip*

Skips the current request and moves to the next one. Useful for conditional
requests, see below.

>javascript
    request.skip();
<


REQUEST.REPLAY*kulala.request-reference-scripts-request-reference-request.replay*

Replays the current request. Useful for conditional requests, see below.

>javascript
    request.replay();
<


CONDITIONAL REQUESTS ~

>http
    < {%
      if (!client.global.get("Token")) {
        request.skip()
      }
    %}
    
    @URL = "500"
    GET https://httpbin.org/status/{{URL}}
    
    > {%
      console.log(response.responseCode)
    
      if (response.responseCode === 500) {
        request.variables.set('URL', "200");
        request.replay()
      }
    %}
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
