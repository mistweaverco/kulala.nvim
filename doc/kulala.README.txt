*kulala.README.txt*         A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents                            *kulala.README-table-of-contents*

  - Features                                          |kulala.README-features|
  - Install                                            |kulala.README-install|
  - Honorable mentions                      |kulala.README-honorable-mentions|


FEATURES                                              *kulala.README-features*

- Protocols: HTTP, GRPC, GraphQL, WebSocket, Streaming
- Specs: HTTP File Spec and IntelliJ HTTP Client compliant
- Variables: Environment, Document, Request, Dynamic, Prompt, `http-profile.env` files
- Importing and running requests from external `*.http` files
- Importing and saving request/response data to/from external files
- JS scripts: Pre-request, Post-request, Conditional, Inline, External
- Authentication: Basic, Bearer, Digest, NTLM, OAuth2, Negotiate, AWS, SSL
- Assertions, automated testing and reporting
- Scratchpad: for making requests


TOGETHER WITH KULALA LANGUAGE SERVER AND KULALA FORMATTER, KULALA AIMS TO PROVIDE THE BEST REST CLIENT EXPERIENCE ON THE WEB WITHOUT LEAVING YOUR FAVOURITE EDITOR! Kulala Language Server https://github.com/mistweaverco/kulala-ls Kulala Formatter https://github.com/mistweaverco/kulala-fmt

We are closely watching products, such as IntelliJ HTTP Client, VS Code REST
Client, Postman, Hurl, Bruno, rest.nvim and others for ideas and inspiration
and our focus is to achieve 100% compatibility with **IntelliJ HTTP Client**,
while providing the features of others and more.


WE LOVE FEATURE REQUESTS AND FEEDBACK, SO IF YOU HAVE ANY IDEAS OR SUGGESTIONS, PLEASE LET US KNOW! WE WILL BE HAPPY TO IMPLEMENT THEM ❤️




INSTALL                                                *kulala.README-install*


  [!WARNING] Requires Neovim 0.10.0+ and cURL.
  See requirements
  https://neovim.getkulala.net/docs/getting-started/requirements.
Via lazy.nvim https://github.com/folke/lazy.nvim:


CONFIGURATION

>lua
    require("lazy").setup({
      {
        "mistweaverco/kulala.nvim",
        keys = {
          { "<leader>Rs", desc = "Send request" },
          { "<leader>Ra", desc = "Send all requests" },
          { "<leader>Rb", desc = "Open scratchpad" },
        },
        ft = {"http", "rest"},
        opts = {
          -- your configuration comes here
          global_keymaps = false,
        },
      },
    })
<


  [!WARNING] `opts` needs to be at least an empty table `{}` and can’t be
  completely omitted.

  [!NOTE] By default global keymaps are disabled, change to `global_keymaps =
  true` to get a complete set of key mappings for Kulala. Check the keymaps
  documentation https://neovim.getkulala.net/docs/getting-started/keymaps for
  details.
See complete configuration options
https://neovim.getkulala.net/docs/getting-started/configuration-options for
more information.


HONORABLE MENTIONS                          *kulala.README-honorable-mentions*


REST.NVIM

For getting this project started.

This project was heavily inspired by the idea of having a REST client in
Neovim.

The actual state of rest.nvim https://github.com/rest-nvim/rest.nvim as
archived kicked off the development of kulala.nvim.


  [!NOTE] The project has been un-archived
  https://github.com/rest-nvim/rest.nvim/issues/398#issue-2442747909 again, so
  check it out if you’re looking for an alternative.

CURL.NVIM

If you want a simple scratchpad for making HTTP requests, check out curl.nvim
https://github.com/oysandvik94/curl.nvim

It’s very different to this project, but it’s a great tool for making HTTP
requests from within Neovim and maybe just your cup of tea.


HTTPBIN.ORG

For providing a great service for testing HTTP requests and making it in all
the kulala examples.

Thanks for making it easy to test and develop this plugin.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
