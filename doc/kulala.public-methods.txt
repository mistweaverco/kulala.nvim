*kulala.public-methods.txt* A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents                    *kulala.public-methods-table-of-contents*

1. Public methods                       |kulala.public-methods-public-methods|

==============================================================================
1. Public methods                       *kulala.public-methods-public-methods*

All public methods are available via the `kulala` module.


RUN

`require('kulala').run()` runs the current request.


RUN_ALL

`require('kulala').run_all()` runs all requests in the current buffer.


REPLAY

`require('kulala').replay()` replays the last run request.


OPEN

`require('kulala').open()` opens default UI in default view


INSPECT

`require('kulala').inspect()` inspects the current request.

It opens up a floating window with the parsed request.


SHOW_STATS

`require('kulala').show_stats()` shows the statistics of the last run request.


SCRATCHPAD

`require('kulala').scratchpad()` opens the scratchpad.

The scratchpad is a (throwaway) buffer where you can write your requests.

It’s useful for quick testing. It’s useful for requests that you don’t
want to save.

It’s default contents can be configured via the
|kulala.configuration-options-scratchpad_default_contents| configuration
option.


COPY

`require('kulala').copy()` copies the current request (as cURL command) to the
clipboard.


FROM_CURL

`require('kulala').from_curl()` parse the cURL command from the clipboard and
write the HTTP spec into current buffer. It’s useful for importing requests
from other tools like browsers.


CLOSE

`require('kulala').close()` closes the kulala window and also the current
buffer.


  (it’ll not close the current buffer, if it’s not a `.http` or `.rest` file)

TOGGLE_VIEW

`require('kulala').toggle_view()` toggles between the `body` and `headers` view
of the last run request.


SEARCH

`require('kulala').search()` searches for all _named_ requests in the current
buffer.


It tries to load up a telescope prompt to select a file or fallback to using
`vim.ui.select`.


JUMP_PREV

`require('kulala').jump_prev()` jumps to the previous request.


JUMP_NEXT

`require('kulala').jump_next()` jumps to the next request.


SCRIPTS_CLEAR_GLOBAL

`require('kulala').scripts_clear_global('variable_name')` clears a global
variable set via |kulala.client-reference|.

You can clear all globals by omitting the `variable_name` like so:
`require('kulala').scripts_clear_global()`.

Additionally, you can clear a list of global variables by passing a table of
variable names like so:
`require('kulala').scripts_clear_global({'variable_name1', 'variable_name2'})`.


CLEAR_CACHED_FILES

`require('kulala').clear_cached_files()` clears all cached files.

These files include:

- last response body
- last response headers
- last response erorrs
- last request data
- global variables set via scripts
- compiled pre- and post-request scripts


DOWNLOAD_GRAPHQL_SCHEMA

You can download the schema of a GraphQL server with:

>
    :lua require("kulala").download_graphql_schema()
<

You need to have your cursor on a line with a GraphQL request.

The file will be downloaded to the the directory where the current file is
located.

The filename will be `[http-file-name-without-extension].graphql-schema.json`.

This file can be used in conjunction with the kulala-cmp-graphql
https://github.com/mistweaverco/kulala-cmp-graphql.nvim plugin to provide
autocompletion and type checking.


GET_SELECTED_ENV


`require('kulala').get_selected_env()` returns the selected environment.


SET_SELECTED_ENV


`require('kulala').set_selected_env(env_key)` sets the selected environment.

See: Environment Files
https://learn.microsoft.com/en-us/aspnet/core/test/http-files?view=aspnetcore-8.0#environment-files.

If you omit the `env_key`, it’ll try to load up a telescope prompt to select
an environment or fallback to using `vim.ui.select`.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
