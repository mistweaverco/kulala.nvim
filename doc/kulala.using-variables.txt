*kulala.using-variables.txt*A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents                   *kulala.using-variables-table-of-contents*

1. Using Variables                    |kulala.using-variables-using-variables|
  - Basic document variables|kulala.using-variables-using-variables-basic-document-variables|
  - Prompt variables |kulala.using-variables-using-variables-prompt-variables|
  - Variables scope   |kulala.using-variables-using-variables-variables-scope|

==============================================================================
1. Using Variables                    *kulala.using-variables-using-variables*

You can use variables in your HTTP requests.


BASIC DOCUMENT VARIABLES*kulala.using-variables-using-variables-basic-document-variables*

Create a file with the `.http` extension and write your HTTP requests in it.

title="examples.http"

>http
    @pokemon=pikachu
    @pokemon2=bulbasaur
    
    GET https://pokeapi.co/api/v2/pokemon/{{pokemon}} HTTP/1.1
    Accept: application/json
    
    ###
    
    GET https://pokeapi.co/api/v2/pokemon/{{pokemon2}} HTTP/1.1
    Accept: application/json
<

These variables are available in all requests in the file.


PROMPT VARIABLES     *kulala.using-variables-using-variables-prompt-variables*

You can also use prompt variables. These are variables that you can set when
you run the request.

title="examples.http"

>http
    # @prompt pokemon
    # @secret password
    GET https://pokeapi.co/api/v2/pokemon/{{pokemon}} HTTP/1.1
    Accept: application/json
<

When you run this request, you will be prompted to enter a value for `pokemon`.

These variables are available for the current request and all subsequent
requests in the file.


VARIABLES SCOPE       *kulala.using-variables-using-variables-variables-scope*

By default, variables are scoped to the entire document, i.e., they are
available in all requests in the file, no matter where they are declared and
later declarations will override earlier ones.

You can change the scope to `variables_scope = "request"` in the options, which
will make variables scoped to the current request only.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
