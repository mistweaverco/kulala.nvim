*kulala.default-keymaps.txt*A fully-featured REST Client Interface for Neovim.

==============================================================================
Table of Contents                   *kulala.default-keymaps-table-of-contents*

1. Default Keymaps                    |kulala.default-keymaps-default-keymaps|

==============================================================================
1. Default Keymaps                    *kulala.default-keymaps-default-keymaps*

By default, global keymaps are disabled, change to `global_keymaps = true` in
the options to enable the complete set of key mappings for Kulala. Check the
|kulala.keymaps.txt| for details on how to customize keymaps and disable the
default keymaps.

Below is the list of available functions and their mappings.

Global keymaps are available in all buffers, while Kulala keymaps are available
in the Kulala UI buffer only. Keymaps with `ft` set will only be available in
buffers with the specified filetype.


GLOBAL AND FT KEYMAPS

>lua
    
      ["Open scratchpad"] = { "<leader>Rb", function() require("kulala").scratchpad() end, },
      ["Open kulala"] = { "<leader>Ro", function() require("kulala").open() end, },
    
      ["Toggle headers/body"] = { "<leader>Rt", function() require("kulala").toggle_view() end, ft = { "http", "rest" }, },
      ["Show stats"] = { "<leader>RS", function() require("kulala").show_stats() end, ft = { "http", "rest" }, },
    
      ["Close window"] = { "<leader>Rq", function() require("kulala").close() end, ft = { "http", "rest" }, },
    
      ["Copy as cURL"] = { "<leader>Rc", function() require("kulala").copy() end, ft = { "http", "rest" }, },
      ["Paste from curl"] = { "<leader>RC", function() require("kulala").from_curl() end, ft = { "http", "rest" }, },
    
      ["Send request"] = { "<leader>Rs", function() require("kulala").run() end, mode = { "n", "v" }, },
      ["Send request <cr>"] = { "<CR>", function() require("kulala").run() end, mode = { "n", "v" }, ft = { "http", "rest" }, },
      ["Send all requests"] = { "<leader>Ra", function() require("kulala").run_all() end, mode = { "n", "v" }, },
    
      ["Inspect current request"] = { "<leader>Ri", function() require("kulala").inspect() end, ft = { "http", "rest" }, },
      ["Replay the last request"] = { "<leader>Rr", function() require("kulala").replay() end, },
    
      ["Find request"] = { "<leader>Rf", function() require("kulala").search() end, ft = { "http", "rest" }, },
      ["Jump to next request"] = { "<leader>Rn", function() require("kulala").jump_next() end, ft = { "http", "rest" }, },
      ["Jump to previous request"] = { "<leader>Rp", function() require("kulala").jump_prev() end, ft = { "http", "rest" }, },
    
      ["Select environment"] = { "<leader>Re", function() require("kulala").set_selected_env() end, ft = { "http", "rest" }, },
      ["Download GraphQL schema"] = { "<leader>Rg", function() require("kulala").download_graphql_schema() end, ft = { "http", "rest" }, },
    
      ["Clear globals"] = { "<leader>Rx", function() require("kulala").scripts_clear_global() end, ft = { "http", "rest" },
      ["Clear cached files"] = { "<leader>RX", function() require("kulala").clear_cached_files() end, ft = { "http", "rest" }, },
<


KULALA UI KEYMAPS

>lua
      ["Show headers"] = { "H", function() require("kulala.ui").show_headers() end, },
      ["Show body"] = { "B", function() require("kulala.ui").show_body() end, },
      ["Show headers and body"] = { "A", function() require("kulala.ui").show_headers_body() end, },
      ["Show verbose"] = { "V", function() require("kulala.ui").show_verbose() end, },
    
      ["Show script output"] = { "O", function() require("kulala.ui").show_script_output() end, },
      ["Show stats"] = { "S", function() require("kulala.ui").show_stats() end, },
      ["Show report"] = { "R", function() require("kulala.ui").show_report() end, },
    
      ["Next response"] = { "]", function() require("kulala.ui").show_next() end, },
      ["Previous response"] = { "[", function() require("kulala.ui").show_previous() end, },
      ["Jump to response"] = { "<CR>", function() require("kulala.ui").jump_to_response() end, },
    
      ["Clear responses history"] = { "X", function() require("kulala.ui").clear_responses_history() end, },
    
      ["Show help"] = { "?", function() require("kulala.ui").show_help() end, },
      ["Close"] = { "q", function() require("kulala.ui").close_kulala_buffer() end, },
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
